// ===========================================================
// üìå Actualizado por Admin-TK ‚úß
// ‚ú¶ Funci√≥n: Verifica si el grupo ha superado su fecha de expiraci√≥n y si es as√≠, el bot abandona el grupo.
// ‚ú¶ Caracter√≠sticas principales:
//   1. **Verificaci√≥n de expiraci√≥n**: Revisa si la fecha de expiraci√≥n ha pasado.
//   2. **Notificaci√≥n al grupo**: Env√≠a un mensaje de despedida cuando el tiempo de renta se haya agotado.
//   3. **Automatizaci√≥n**: El bot deja autom√°ticamente el grupo cuando se alcanza la fecha de expiraci√≥n.
//   4. **Manejo de errores**: A√±adido para manejar cualquier fallo en la ejecuci√≥n.
// ===========================================================

export async function all(m) {
    // Verifica si el mensaje proviene de un grupo
    if (!m.isGroup) return;

    // Obtiene los datos del chat desde la base de datos
    let chats = global.db.data.chats[m.chat];

    // Si no hay fecha de expiraci√≥n configurada, no realiza ninguna acci√≥n
    if (!chats.expired) return true;

    // Manejo de errores: si ocurre un fallo en el proceso, lo capturamos
    try {
        // Verifica si la fecha de expiraci√≥n ha pasado
        if (+new Date() > chats.expired) {
            // Permite personalizar el mensaje de despedida
            let goodbyeMessage = chats.expiredMessage || '‚úß *Adi√≥s a todos* ‚úß\n
‚è≥ *La renta del grupo ha finalizado*. Si desean renovar, por favor contacten con el owner para continuar disfrutando del servicio de Admin-TK. ¬°Gracias por confiar en nosotros!';
            
            // Notifica en el grupo que la renta ha finalizado
            await this.reply(m.chat, goodbyeMessage);

            // El bot abandona el grupo
            await this.groupLeave(m.chat);

            // Resetea la fecha de expiraci√≥n en la base de datos
            chats.expired = null;

            return true;
        }
    } catch (error) {
        console.error('‚ùå Error al verificar la expiraci√≥n:', error);
        await this.reply(m.chat, '‚úß *Hubo un error al intentar verificar la expiraci√≥n del grupo*. Admin-TK est√° trabajando para solucionarlo.');
    }

    // Si no ha expirado, no hace nada
    return true;
}

// Comando para cambiar la fecha de expiraci√≥n de forma din√°mica (esto puede estar en un comando separado)
export async function setExpiration(m, newExpirationDate) {
    let chats = global.db.data.chats[m.chat];
    
    try {
        // Establece la nueva fecha de expiraci√≥n
        chats.expired = newExpirationDate.getTime();  // Establece la nueva fecha
        await this.reply(m.chat, `‚úß *La fecha de expiraci√≥n ha sido actualizada* ‚úß\nüìÖ Nueva fecha: ${newExpirationDate.toString()}`);
    } catch (error) {
        console.error('‚ùå Error al actualizar la fecha de expiraci√≥n:', error);
        await this.reply(m.chat, '‚úß *Hubo un error al intentar actualizar la fecha de expiraci√≥n*. Admin-TK lo solucionar√° pronto.');
    }
}

// Comando para reiniciar el contador de expiraci√≥n si se reactiva el grupo (ej. pago o renovaci√≥n)
export async function resetExpiration(m) {
    let chats = global.db.data.chats[m.chat];

    try {
        // Reinicia la fecha de expiraci√≥n
        chats.expired = null;  // Resetea la fecha de expiraci√≥n
        await this.reply(m.chat, '‚úß *¬°La renta ha sido renovada!* ‚úß\nüéâ ¬°El grupo sigue activo! Gracias por continuar con Admin-TK. ‚ú®');
    } catch (error) {
        console.error('‚ùå Error al reiniciar la expiraci√≥n:', error);
        await this.reply(m.chat, '‚úß *Hubo un error al intentar reiniciar la expiraci√≥n*. Admin-TK est√° trabajando para solucionarlo.');
    }
}
