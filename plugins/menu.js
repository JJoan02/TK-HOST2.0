const handlerMenu = async (m, { conn, usedPrefix: _p, args }) => {
    try {
        const tags = {
            main: '`üíé FUNCIONES PRINCIPALES`',
            anonymous: '`üé≠ CHAT AN√ìNIMO`',
            ai: '`ü§ñ INTELIGENCIA ARTIFICIAL`',
            confesar: '`üíå CONFESIONES`',
            rpg: '`üéÆ AVENTURAS Y JUEGOS`',
            fun: '`üéâ DIVERSI√ìN`',
            search: '`üîç B√öSQUEDA`',
            downloader: '`‚¨áÔ∏è DESCARGAS`',
            internet: '`üåê INTERNET Y HERRAMIENTAS`',
            anime: '`üçô ANIME`',
            nsfw: '`üîû CONTENIDO ADULTO`',
            sticker: '`‚ú® CREACI√ìN DE STICKERS`',
            tools: '`üîß HERRAMIENTAS`',
            group: '`üë• CONFIGURACI√ìN DE GRUPOS`',
            owner: '`üëë ADMINISTRACI√ìN`',
        };

        const category = args[0]?.toLowerCase();

        if (!category) {
            // Mostrar el men√∫ de categor√≠as si no hay argumento
            const menuText = `
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë     üìú *…¢·¥ú√≠·¥Ä ·¥Ö·¥á ü ·¥ç·¥á…¥√∫ ·¥õ·¥ã* üìú     
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üëã * ú·¥è ü·¥Ä, ${m.pushName || 'Usuario'}.*
·¥á…¥ ·¥áÍú±·¥õ·¥á ·¥ç·¥á…¥√∫ ·¥á…¥·¥Ñ·¥è…¥·¥õ Ä·¥Ä Ä√°Íú± ·¥ú…¥·¥Ä ·¥Ö·¥áÍú±·¥Ñ Ä…™·¥ò·¥Ñ…™√≥…¥ ·¥Ö·¥á·¥õ·¥Ä ü ü·¥Ä·¥Ö·¥Ä ·¥Ö·¥á ·¥Ñ·¥Ä·¥Ö·¥Ä ·¥Ñ·¥è·¥ç·¥Ä…¥·¥Ö·¥è ·¥Ö…™Íú±·¥ò·¥è…¥…™ ô ü·¥á.  

üóìÔ∏è Íú∞·¥á·¥Ñ ú·¥Ä: ${new Date().toLocaleDateString()}  
‚è∞  ú·¥è Ä·¥Ä: ${new Date().toLocaleTimeString()}  

üõ†Ô∏è *¬ø·¥Ñ√≥·¥ç·¥è ·¥úÍú±·¥Ä Ä ·¥áÍú±·¥õ·¥á ·¥ç·¥á…¥√∫?*
1Ô∏è‚É£  ô·¥úÍú±·¥Ñ·¥Ä  ü·¥Ä ·¥Ñ·¥Ä·¥õ·¥á…¢·¥è Ä√≠·¥Ä Íú±·¥á…¢√∫…¥ ·¥õ·¥ú …™…¥·¥õ·¥á Ä√©Íú±.  
2Ô∏è‚É£ ·¥áÍú±·¥Ñ Ä…™ ô·¥á \`.categoria\` (·¥ò·¥è Ä ·¥á·¥ä·¥á·¥ç·¥ò ü·¥è: \`.main\`) ·¥ò·¥Ä Ä·¥Ä ·¥†·¥á Ä Íú±·¥úÍú± ·¥Ñ·¥è·¥ç·¥Ä…¥·¥Ö·¥èÍú±.

üìÇ *Categor√≠as disponibles:*
${Object.entries(tags).map(([key, value]) => `- ${value} (\`${_p}${key}\`)`).join('\n')}

> üëë *·¥Ä·¥Ö·¥ç…™…¥-·¥õ·¥ã ·¥áÍú±·¥õ√° Íú±…™·¥á·¥ç·¥ò Ä·¥á ·¥Ñ·¥è…¥·¥õ…™…¢·¥è.*
            `.trim();

            return m.reply(menuText);
        }

        if (category === 'allmenu') {
            // Mostrar todos los comandos
            const help = Object.values(global.plugins).filter(plugin => !plugin.disabled);
            const allCommands = help.map(plugin => plugin.help.map(cmd => `${_p}${cmd} - ${plugin.description || 'Sin descripci√≥n'}`).join('\n')).join('\n');

            return m.reply(`üìú *TODOS LOS COMANDOS DISPONIBLES* üìú\n\n${allCommands}`);
        }

        // Mostrar los comandos de una categor√≠a espec√≠fica
        if (!tags[category]) return m.reply(`Categor√≠a no v√°lida. Usa \`.menu\` para ver las categor√≠as disponibles.`);

        const help = Object.values(global.plugins)
            .filter(plugin => !plugin.disabled && plugin.tags && plugin.tags.includes(category))
            .map(plugin => plugin.help.map(cmd => `${_p}${cmd} - ${plugin.description || 'Sin descripci√≥n'}`).join('\n')).join('\n');

        if (!help) return m.reply(`No hay comandos disponibles en la categor√≠a \`${tags[category]}\``);

        const text = `
üìÇ *Categor√≠a: ${tags[category]}*

${help}
        `.trim();

        await m.reply(text);

    } catch (error) {
        console.error(error);
        throw 'Hubo un error mostrando el men√∫. Por favor, intenta nuevamente.';
    }
};

handlerMenu.help = ['menu', 'allmenu'];
handlerMenu.tags = ['main'];
handlerMenu.command = ['menu', 'allmenu', ...Object.keys(tags)];

export default handlerMenu;
